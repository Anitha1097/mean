{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { map } from 'rxjs/operators';\nimport { environment } from \"../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiUrl + \"/posts/\";\nexport let PostService = /*#__PURE__*/(() => {\n  class PostService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.posts = [];\n      this.postsUpdated = new Subject();\n    }\n\n    getAllData() {\n      // const pospostDatats = {\n      //   title: 'Title',\n      //   content: 'Content'\n      // };\n      // return posts;\n      return this.httpClient.get(BACKEND_URL);\n    }\n\n    getPosts(postsPerPage, currentPage) {\n      const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n      this.httpClient.get(BACKEND_URL + queryParams).pipe(map(postData => {\n        return {\n          posts: postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id,\n              imagePath: post.imagePath,\n              creator: post.creator\n            };\n          }),\n          maxPosts: postData.maxPosts\n        };\n      })).subscribe(transformedPostData => {\n        this.posts = transformedPostData.posts;\n        console.log(this.posts);\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: transformedPostData.maxPosts\n        });\n      }); // .pipe(map((postData) => {\n      //   return postData.posts.map(post => {\n      //     return {\n      //       title: post.title,\n      //       content: post.content,\n      //       id: post._id\n      //     };\n      //   });\n      // }))\n      // .subscribe(transformedPosts => {\n      //   this.posts = transformedPosts;\n      //   this.postsUpdated.next([...this.posts]);\n      // });\n    }\n\n    getPost(id) {\n      return this.httpClient.get(BACKEND_URL + id);\n    }\n\n    getPostUpdateListener() {\n      return this.postsUpdated.asObservable();\n    } // postData(newReg) {\n    //   return this.httpClient.post(this.url, newReg);\n    // }\n\n\n    postData(title, content, imagePath) {\n      const postData = new FormData();\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"imagePath\", imagePath);\n      this.httpClient.post(BACKEND_URL, postData).subscribe(responseData => {\n        const post = {\n          id: responseData.post.id,\n          title: responseData.post.title,\n          content: responseData.post.content,\n          imagePath: responseData.post.imagePath,\n          creator: null\n        };\n        this.posts.push(post);\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: 0\n        });\n        this.router.navigate([\"/\"]);\n      });\n    }\n\n    deletePost(postId) {\n      this.httpClient.delete(BACKEND_URL + postId).subscribe(() => {\n        const updatedPosts = this.posts.filter(post => post.id !== postId);\n        this.posts = updatedPosts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: 0\n        });\n      });\n    }\n\n    updatePost(id, title, content, imagePath) {\n      // const post: Post = { id: id, title: title, content: content };\n      // this.httpClient\n      //   .put(this.url + id, post)\n      //   .subscribe(response => console.log(response));\n      // const post: Post = { id: id, title: title, content: content, imagePath: \"\"};\n      const postData = new FormData();\n      postData.append(\"id\", id);\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"imagePath\", imagePath);\n      console.log(postData);\n      this.httpClient.put(BACKEND_URL + id, postData).subscribe(responseData => {\n        const updatedPosts = [...this.posts];\n        const oldPostIndex = updatedPosts.findIndex(p => p.id === id);\n        const post = {\n          id: id,\n          title: title,\n          content: content,\n          imagePath: '',\n          creator: null\n        };\n        updatedPosts[oldPostIndex] = post;\n        this.posts = updatedPosts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: 0\n        });\n        this.router.navigate([\"/\"]);\n      });\n    }\n\n  }\n\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostService;\n})();","map":null,"metadata":{},"sourceType":"module"}