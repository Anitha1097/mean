{"ast":null,"code":"import { enableProdMode } from '@angular/core';\nimport { Subject } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiUrl + \"/user/\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\nexport let AuthServices = /*#__PURE__*/(() => {\n  class AuthServices {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuthenticated = false;\n      this.authStatusListener = new Subject();\n      this.socialAuthStatusListener = new Subject();\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    getUserId() {\n      return this.userId;\n    }\n\n    getAuthStatusListener() {\n      return this.authStatusListener.asObservable();\n    }\n\n    getSocialAuthStatusListener() {\n      return this.socialAuthStatusListener.asObservable();\n    }\n\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n\n    createUser(email, password) {\n      const authData = {\n        email: email,\n        password: password,\n        type: 'sample'\n      };\n      this.http.post(BACKEND_URL + \"signup\", authData).subscribe(response => {\n        console.log(response);\n        this.router.navigate([\"/\"]);\n      }, error => {\n        this.authStatusListener.next(false);\n      });\n    }\n\n    login(email, password, type) {\n      const authData = {\n        email: email,\n        password: password,\n        type: type\n      };\n      this.http.post(BACKEND_URL + \"login\", authData).subscribe(response => {\n        console.log(response);\n        const token = response.token;\n        this.token = token;\n\n        if (token) {\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.userId = response.userId;\n\n          if (response.type == 'socialLogin') {\n            this.socialAuthStatusListener.next(true);\n            this.authStatusListener.next(false);\n          } else {\n            this.authStatusListener.next(true);\n            this.socialAuthStatusListener.next(false);\n          }\n\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n          console.log(expirationDate);\n          this.saveAuthData(token, expirationDate, this.userId);\n          this.router.navigate(['/']);\n        }\n      }, error => {\n        this.authStatusListener.next(false);\n        this.socialAuthStatusListener.next(false);\n      });\n    }\n\n    autoAuthUser() {\n      const authInformation = this.getAuthData();\n\n      if (!authInformation) {\n        return;\n      }\n\n      const now = new Date();\n      const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n\n      if (expiresIn > 0) {\n        this.token = authInformation.token;\n        this.isAuthenticated = true;\n        this.userId = authInformation.userId;\n        this.setAuthTimer(expiresIn / 1000);\n        this.authStatusListener.next(true);\n      }\n    }\n\n    getAuthData() {\n      const token = localStorage.getItem(\"token\");\n      const expirationDate = localStorage.getItem(\"expiration\");\n      const userId = localStorage.getItem(\"userId\");\n\n      if (!token || !expirationDate) {\n        return 0;\n      }\n\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate),\n        userId: userId\n      };\n    }\n\n    setAuthTimer(duration) {\n      console.log(\"Setting timer: \" + duration);\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, duration * 1000);\n    }\n\n    saveAuthData(token, expirationDate, userId) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expiration\", expirationDate.toISOString());\n      localStorage.setItem(\"userId\", userId);\n    }\n\n    clearAuthData() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expiration\");\n      localStorage.removeItem(\"userId\");\n    }\n\n    logout() {\n      this.token = null;\n      this.isAuthenticated = false;\n      this.authStatusListener.next(false);\n      this.socialAuthStatusListener.next(false);\n      this.userId = null;\n      clearTimeout(this.tokenTimer);\n      this.clearAuthData();\n      this.router.navigate(['/']);\n    }\n\n  }\n\n  AuthServices.ɵfac = function AuthServices_Factory(t) {\n    return new (t || AuthServices)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServices,\n    factory: AuthServices.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthServices;\n})();","map":null,"metadata":{},"sourceType":"module"}