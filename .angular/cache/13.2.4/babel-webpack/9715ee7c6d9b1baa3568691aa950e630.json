{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Injectable, Optional, SkipSelf, NgModule } from '@angular/core';\nimport { ReplaySubject, isObservable, BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar AuthService_1;\n\nclass AuthServiceConfig {\n  constructor(providers) {\n    this.lazyLoad = false;\n    this.providers = new Map();\n    this._ready = new ReplaySubject();\n\n    if (isObservable(providers)) {\n      providers.pipe(first()).subscribe(providerList => {\n        this.initialize(providerList);\n      });\n    } else {\n      this.initialize(providers);\n    }\n  }\n\n  initialize(providers) {\n    for (let i = 0; i < providers.length; i++) {\n      let element = providers[i];\n      this.providers.set(element.id, element.provider);\n      this.lazyLoad = this.lazyLoad || element.lazyLoad;\n    }\n\n    this._ready.next();\n\n    this._ready.complete();\n  }\n\n}\n\nlet AuthService = AuthService_1 = class AuthService {\n  constructor(config) {\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    this._readyState = new BehaviorSubject([]);\n    this.initialized = false;\n\n    config._ready.subscribe(() => {\n      this.providers = config.providers;\n\n      if (!config.lazyLoad) {\n        this.initialize();\n      }\n    });\n  }\n\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** Provides an array of provider ID's as they become ready */\n\n\n  get readyState() {\n    return this._readyState.asObservable();\n  }\n\n  initialize() {\n    this.initialized = true;\n    this.providers.forEach((provider, key) => {\n      provider.initialize().then(() => {\n        let readyProviders = this._readyState.getValue();\n\n        readyProviders.push(key);\n\n        this._readyState.next(readyProviders);\n\n        provider.getLoginStatus().then(user => {\n          user.provider = key;\n          this._user = user;\n\n          this._authState.next(user);\n        }).catch(err => {\n          this._authState.next(null);\n        });\n      });\n    });\n  }\n\n  signIn(providerId, opt) {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    return new Promise((resolve, reject) => {\n      let providerObject = this.providers.get(providerId);\n\n      if (providerObject) {\n        providerObject.signIn(opt).then(user => {\n          user.provider = providerId;\n          resolve(user);\n          this._user = user;\n\n          this._authState.next(user);\n        }).catch(err => {\n          reject(err);\n        });\n      } else {\n        reject(AuthService_1.ERR_LOGIN_PROVIDER_NOT_FOUND);\n      }\n    });\n  }\n\n  signOut(revoke = false) {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this._user) {\n        reject(AuthService_1.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this._user = null;\n\n            this._authState.next(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(AuthService_1.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n};\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(ɵngcc0.ɵɵinject(AuthServiceConfig));\n};\n\nAuthService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: function (t) {\n    return AuthService.ɵfac(t);\n  }\n});\nAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\n\nAuthService.ctorParameters = () => [{\n  type: AuthServiceConfig\n}];\n\nvar SocialLoginModule_1;\n\nfunction configFactory(config) {\n  return config;\n}\n\nlet SocialLoginModule = SocialLoginModule_1 = class SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule_1,\n      providers: [AuthService, {\n        provide: AuthServiceConfig,\n        useValue: config\n      }]\n    };\n  }\n\n};\n\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(ɵngcc0.ɵɵinject(SocialLoginModule, 12));\n};\n\nSocialLoginModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [AuthService],\n  imports: [[CommonModule]]\n});\n\nSocialLoginModule.ctorParameters = () => [{\n  type: SocialLoginModule,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}];\n\nSocialLoginModule = SocialLoginModule_1 = __decorate([__param(0, Optional()), __param(0, SkipSelf())], SocialLoginModule);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialLoginModule, {\n    imports: function () {\n      return [CommonModule];\n    }\n  });\n})();\n\nclass SocialUser {}\n\nclass BaseLoginProvider {\n  constructor() {\n    this._readyState = new BehaviorSubject(false);\n  }\n\n  onReady() {\n    return new Promise((resolve, reject) => {\n      this._readyState.subscribe(isReady => {\n        if (isReady) {\n          resolve();\n        }\n      });\n    });\n  }\n\n  loadScript(id, src, onload, async = true, inner_text_content = '') {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = async;\n      signInJS.src = src;\n      signInJS.onload = onload;\n      /*\r\n      if (inner_text_content) // LinkedIn\r\n          signInJS.text = inner_text_content;\r\n      */\n\n      document.head.appendChild(signInJS);\n    }\n  }\n\n}\n\nlet GoogleLoginProvider = /*#__PURE__*/(() => {\n  class GoogleLoginProvider extends BaseLoginProvider {\n    constructor(clientId, opt = {\n      scope: 'email'\n    }) {\n      super();\n      this.clientId = clientId;\n      this.opt = opt;\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n          gapi.load('auth2', () => {\n            this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.opt), {\n              client_id: this.clientId\n            }));\n            this.auth2.then(() => {\n              this._readyState.next(true);\n\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        });\n      });\n    }\n\n    getLoginStatus() {\n      return new Promise((resolve, reject) => {\n        this.onReady().then(() => {\n          if (this.auth2.isSignedIn.get()) {\n            let user = new SocialUser();\n            let profile = this.auth2.currentUser.get().getBasicProfile();\n            let token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\n            let backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\n            user.id = profile.getId();\n            user.name = profile.getName();\n            user.email = profile.getEmail();\n            user.photoUrl = profile.getImageUrl();\n            user.firstName = profile.getGivenName();\n            user.lastName = profile.getFamilyName();\n            user.authToken = token;\n            user.idToken = backendToken;\n            resolve(user);\n          } else {\n            reject('No user is currently logged in.');\n          }\n        });\n      });\n    }\n\n    signIn(opt) {\n      return new Promise((resolve, reject) => {\n        this.onReady().then(() => {\n          const offlineAccess = opt && opt.offline_access || this.opt && this.opt.offline_access;\n          let promise = !offlineAccess ? this.auth2.signIn(opt) : this.auth2.grantOfflineAccess(opt);\n          promise.then(response => {\n            let user = new SocialUser();\n            let profile = this.auth2.currentUser.get().getBasicProfile();\n            let token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\n            let backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\n            user.id = profile.getId();\n            user.name = profile.getName();\n            user.email = profile.getEmail();\n            user.photoUrl = profile.getImageUrl();\n            user.firstName = profile.getGivenName();\n            user.lastName = profile.getFamilyName();\n            user.authToken = token;\n            user.idToken = backendToken;\n\n            if (response && response.code) {\n              user.authorizationCode = response.code;\n            }\n\n            resolve(user);\n          }, closed => {\n            reject('User cancelled login or did not fully authorize.');\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      });\n    }\n\n    signOut(revoke) {\n      return new Promise((resolve, reject) => {\n        this.onReady().then(() => {\n          let signOutPromise;\n\n          if (revoke) {\n            signOutPromise = this.auth2.disconnect();\n          } else {\n            signOutPromise = this.auth2.signOut();\n          }\n\n          signOutPromise.then(err => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      });\n    }\n\n  }\n\n  GoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n  return GoogleLoginProvider;\n})();\nlet FacebookLoginProvider = /*#__PURE__*/(() => {\n  class FacebookLoginProvider extends BaseLoginProvider {\n    constructor(clientId, opt = {\n      scope: 'email,public_profile'\n    }, locale = 'en_US', fields = 'name,email,picture,first_name,last_name', version = 'v4.0') {\n      super();\n      this.clientId = clientId;\n      this.opt = opt;\n      this.locale = locale;\n      this.fields = fields;\n      this.version = version;\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.version\n          }); // FB.AppEvents.logPageView(); #FIX for #18\n\n          this._readyState.next(true);\n\n          resolve();\n        });\n      });\n    }\n\n    getLoginStatus() {\n      return new Promise((resolve, reject) => {\n        this.onReady().then(() => {\n          FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n              let authResponse = response.authResponse;\n              FB.api(`/me?fields=${this.fields}`, fbUser => {\n                let user = new SocialUser();\n                user.id = fbUser.id;\n                user.name = fbUser.name;\n                user.email = fbUser.email;\n                user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n                user.firstName = fbUser.first_name;\n                user.lastName = fbUser.last_name;\n                user.authToken = authResponse.accessToken;\n                user.facebook = fbUser;\n                resolve(user);\n              });\n            } else {\n              reject('No user is currently logged in.');\n            }\n          });\n        });\n      });\n    }\n\n    signIn(opt) {\n      return new Promise((resolve, reject) => {\n        this.onReady().then(() => {\n          FB.login(response => {\n            if (response.authResponse) {\n              let authResponse = response.authResponse;\n              FB.api(`/me?fields=${this.fields}`, fbUser => {\n                let user = new SocialUser();\n                user.id = fbUser.id;\n                user.name = fbUser.name;\n                user.email = fbUser.email;\n                user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n                user.firstName = fbUser.first_name;\n                user.lastName = fbUser.last_name;\n                user.authToken = authResponse.accessToken;\n                user.facebook = fbUser;\n                resolve(user);\n              });\n            } else {\n              reject('User cancelled login or did not fully authorize.');\n            }\n          }, this.opt);\n        });\n      });\n    }\n\n    signOut() {\n      return new Promise((resolve, reject) => {\n        this.onReady().then(() => {\n          FB.logout(response => {\n            resolve();\n          });\n        });\n      });\n    }\n\n  }\n\n  FacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n  /**\r\n   * Generated bundle index. Do not edit.\r\n   */\n\n  return FacebookLoginProvider;\n})();\nexport { AuthService, AuthServiceConfig, FacebookLoginProvider, GoogleLoginProvider, SocialLoginModule, SocialUser, BaseLoginProvider as ɵa }; //# sourceMappingURL=angularx-social-login.js.map","map":null,"metadata":{},"sourceType":"module"}